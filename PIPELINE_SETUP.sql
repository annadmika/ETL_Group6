-- ============================================
-- A. ROLE & WAREHOUSE SETUP 
-- ============================================

USE ROLE SECURITYADMIN;

CREATE ROLE IF NOT EXISTS INGEST;
CREATE ROLE IF NOT EXISTS DATA_VIZ;
CREATE ROLE IF NOT EXISTS ETL_ADMIN;  -- optional role for ownership of tasks / pipelines

-- 2) Create pipeline warehouses
USE ROLE SYSADMIN;

CREATE WAREHOUSE IF NOT EXISTS PIPELINE_WH
  WAREHOUSE_SIZE = 'SMALL'
  AUTO_SUSPEND = 60
  AUTO_RESUME = TRUE
  INITIALLY_SUSPENDED = TRUE;

CREATE WAREHOUSE IF NOT EXISTS ANALYTICS_WH
  WAREHOUSE_SIZE = 'XSMALL'
  AUTO_SUSPEND = 300
  AUTO_RESUME = TRUE
  INITIALLY_SUSPENDED = TRUE;


-- ============================================
-- B. DATABASE / SCHEMA CREATION
-- ============================================

USE ROLE ACCOUNTADMIN;

-- Primary data warehouse DB
CREATE DATABASE IF NOT EXISTS ECO_COFFEE_DWH;
GRANT OWNERSHIP ON DATABASE ECO_COFFEE_DWH TO ROLE ACCOUNTADMIN REVOKE CURRENT GRANTS;
USE DATABASE ECO_COFFEE_DWH;

CREATE SCHEMA IF NOT EXISTS RAW;
CREATE SCHEMA IF NOT EXISTS SILVER;
CREATE SCHEMA IF NOT EXISTS GOLD;

-- Analytics / dashboard DB
CREATE DATABASE IF NOT EXISTS STREAMLIT_APPS;
GRANT OWNERSHIP ON DATABASE STREAMLIT_APPS TO ROLE ACCOUNTADMIN REVOKE CURRENT GRANTS;
USE DATABASE STREAMLIT_APPS;
CREATE SCHEMA IF NOT EXISTS GOLD_COPY;


-- ============================================
-- C. GRANTS 
-- ============================================

-- INGEST access to warehouses
GRANT USAGE ON WAREHOUSE PIPELINE_WH TO ROLE INGEST;
GRANT USAGE ON WAREHOUSE ANALYTICS_WH TO ROLE INGEST;

-- Access to ECO_COFFEE_DWH
GRANT USAGE ON DATABASE ECO_COFFEE_DWH TO ROLE INGEST;
GRANT USAGE ON ALL SCHEMAS IN DATABASE ECO_COFFEE_DWH TO ROLE INGEST;
GRANT CREATE TABLE, CREATE STAGE, CREATE STREAM, CREATE PIPE, CREATE TASK, CREATE FILE FORMAT
  ON SCHEMA ECO_COFFEE_DWH.RAW TO ROLE INGEST;
GRANT CREATE TABLE, CREATE STAGE, CREATE STREAM, CREATE PIPE, CREATE TASK, CREATE FILE FORMAT
  ON SCHEMA ECO_COFFEE_DWH.SILVER TO ROLE INGEST;
GRANT CREATE TABLE, CREATE STAGE, CREATE STREAM, CREATE PIPE, CREATE TASK, CREATE FILE FORMAT
  ON SCHEMA ECO_COFFEE_DWH.GOLD TO ROLE INGEST;

-- Allow reading source tables (needed for streams)
GRANT SELECT ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.RAW TO ROLE INGEST;
GRANT SELECT ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.SILVER TO ROLE INGEST;
GRANT SELECT ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.GOLD TO ROLE INGEST;

-- STREAMLIT_APPS access
GRANT USAGE ON DATABASE STREAMLIT_APPS TO ROLE INGEST;
GRANT USAGE ON ALL SCHEMAS IN DATABASE STREAMLIT_APPS TO ROLE INGEST;
-- Schema-level privileges
GRANT CREATE STREAM, CREATE TASK, CREATE TABLE ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE INGEST;
GRANT INSERT, UPDATE, DELETE, SELECT ON ALL TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE INGEST;
GRANT INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE INGEST;
GRANT CREATE FILE FORMAT ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE INGEST;

GRANT USAGE ON DATABASE STREAMLIT_APPS TO ROLE DATA_VIZ;
GRANT USAGE ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT SELECT ON ALL TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT SELECT ON FUTURE TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT CREATE STAGE ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;


-- ============================================
-- D. CREATE INGEST USER
-- ============================================

USE ROLE SECURITYADMIN;

CREATE USER INGEST PASSWORD='ETLWAREHOUSING1a' LOGIN_NAME='INGEST' 
    MUST_CHANGE_PASSWORD=FALSE, DISABLED=FALSE, 
    DEFAULT_WAREHOUSE='INGEST', DEFAULT_NAMESPACE='INGEST.INGEST', 
    DEFAULT_ROLE='INGEST';

ALTER USER INGEST SET RSA_PUBLIC_KEY='-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuWTCGn8M7yuCYgSCPMgl
SQeOmTYYhlLpXlVGGT0Je+7iBvOMywSvG+NfqRPBM+rhVNnjRshpO0kKgKXhO3P+
c2c8RIAvNWX0lSDB8PRmVSjgE6i8pw3FK8+hvNzCpr/H2Ne3zG34QVLDAmZdZ4b5
ST6ZvGwbEvgv0oYUDQNgtxieqWUsNmIkNAxCAcRBSD+nuwBO36NT+cddMbCrdyCF
XQa9KXIatLT81dOow2IJCbPspsEjL2q8LERzT5br69Y8Z+Cfl7ZPy4n+7Gw/KZEu
sB6nrdNK1U3QW9YMZ5h5MlSOVhR3quWqLfbYa4MogMBv46PCn+zwsESZP58WRzzv
+f+EJn6pshXszGE8wBLWxPneoZiT42zGLKTRKR3MdyuZlU/AVVPnh+XvZnXzxkB4
UsbJr5MqP9maQpX2ZjzHW3o03wpHFMezvVKkLDC0tnhX8sYY7yOWJ427lTHtw3BB
eDKnH1Bc8DxtMVZB2j5XTQtQzJqR7b+90kD7zf0NW6jXYD2erZfYCBUg0OpkznBY
uwjTg3MRh/lZjqRCsTkR7ptJhLRGaY0mypAiKa+csNvNS3YS/jmvrBY3/SrKWICY
9b+gmflKExQjzM++5m87QMXOAuEIFjrW/67Eh0LafUFuchpqsjEis12zRk2PlYPB
tv8h+UJbwpiN0xLn2p9wxIcCAwEAAQ==
-----END PUBLIC KEY-----';

GRANT ROLE INGEST TO USER INGEST;

SET USERNAME=CURRENT_USER();
GRANT ROLE INGEST TO USER IDENTIFIER($USERNAME);


-- ============================================
-- E. RAW TABLES 
-- ============================================

USE ROLE INGEST;
USE DATABASE ECO_COFFEE_DWH;
USE SCHEMA RAW;

-- Orders table
CREATE OR REPLACE TABLE RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE (
    TXID STRING NOT NULL,
    RFID STRING,
    CUSTOMER_ID STRING,
    PRODUCT_ID STRING,
    ITEM STRING,
    BAG_SIZE STRING,
    UNIT_PRICE NUMBER(10,2),
    QUANTITY NUMBER(10,0),
    TOTAL_PRICE NUMBER(12,2),
    ORIGIN_COUNTRY STRING,
    FAIR_TRADE_CERTIFIED BOOLEAN,
    ORGANIC_CERTIFIED BOOLEAN,
    PURCHASE_TIME TIMESTAMP_NTZ NOT NULL,
    SHIPPED_DATE TIMESTAMP_NTZ,
    DELIVERED_DATE TIMESTAMP_NTZ,
    REGION STRING,
    NAME STRING,
    STREET_ADDRESS STRING,
    CITY STRING,
    COUNTRY STRING,
    POSTALCODE STRING,
    PHONE STRING,
    EMAIL STRING,
    WAREHOUSE STRING,
    SHIPPING_METHOD STRING,
    DELIVERY_STATUS STRING,
    PAYMENT_METHOD STRING,
    PAYMENT_STATUS STRING,
    DELIVERY_DELAY_DAYS NUMBER(10,0),
    CARBON_SCORE NUMBER(10,2),
    METADATA VARIANT,
    PRIMARY KEY (TXID)
);

-- Emissions table
CREATE OR REPLACE TABLE RAW_CARBON_EMISSIONS_PY_SNOWPIPE (
    RECORD_ID STRING NOT NULL,
    REPORTING_MONTH DATE NOT NULL,
    WAREHOUSE_ID STRING NOT NULL,
    WAREHOUSE_NAME STRING,
    WAREHOUSE_COUNTRY STRING,
    ORIGIN_COUNTRY STRING,
    DISTANCE_CLASS STRING,
    SHIPPING_METHOD STRING,
    SHIPMENTS_COUNT NUMBER(10,0),
    AVG_BATCH_SIZE_KG NUMBER(10,2),
    ESTIMATED_EMISSIONS_KGCO2E NUMBER(12,2),
    RAW_PAYLOAD VARIANT,
    PRIMARY KEY (RECORD_ID)
);


-- ============================================
-- F. FILE FORMATS + STAGES + PIPES
-- ============================================

CREATE OR REPLACE PIPE CLIENT_SUPPORT_ORDERS_PIPE AS
COPY INTO RAW.RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE
FROM @RAW.%RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE
FILE_FORMAT = (TYPE='PARQUET')
MATCH_BY_COLUMN_NAME = CASE_SENSITIVE
ON_ERROR = 'CONTINUE';

CREATE OR REPLACE PIPE CARBON_EMISSIONS_PIPE AS
COPY INTO RAW.RAW_CARBON_EMISSIONS_PY_SNOWPIPE
FROM @RAW.%RAW_CARBON_EMISSIONS_PY_SNOWPIPE
FILE_FORMAT = (TYPE='PARQUET')
MATCH_BY_COLUMN_NAME = CASE_SENSITIVE
ON_ERROR = 'CONTINUE';


-- ============================================
-- G. SILVER TABLES
-- ============================================

USE SCHEMA SILVER;

CREATE OR REPLACE TABLE CLIENT_SUPPORT_ORDERS_CLEAN LIKE RAW.RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE;
CREATE OR REPLACE TABLE CARBON_EMISSIONS_CLEAN LIKE RAW.RAW_CARBON_EMISSIONS_PY_SNOWPIPE;

-- ============================================
-- G.1 Per-Warehouse Silver Tables
-- ============================================

-- Example warehouses: WH_A, WH_B, WH_C
CREATE OR REPLACE TABLE CLIENT_SUPPORT_ORDERS_WH_A AS
SELECT *
FROM CLIENT_SUPPORT_ORDERS_CLEAN
WHERE 1=0; -- empty table with same structure

CREATE OR REPLACE TABLE CLIENT_SUPPORT_ORDERS_WH_B AS
SELECT *
FROM CLIENT_SUPPORT_ORDERS_CLEAN
WHERE 1=0;

CREATE OR REPLACE TABLE CLIENT_SUPPORT_ORDERS_WH_C AS
SELECT *
FROM CLIENT_SUPPORT_ORDERS_CLEAN
WHERE 1=0;

-- ============================================
-- H. GOLD TABLE
-- ============================================

USE SCHEMA GOLD;

CREATE OR REPLACE TABLE WAREHOUSE_SUSTAINABILITY_METRICS (
    WAREHOUSE STRING,
    WAREHOUSE_COUNTRY STRING,
    REPORTING_MONTH DATE,
    TOTAL_ORDERS NUMBER,
    TOTAL_REVENUE NUMBER(36,2),
    AVG_CARBON_SCORE NUMBER(10,4),
    TOTAL_EMISSIONS_KGCO2E NUMBER(36,2),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);


-- ============================================
-- I. STREAMS
-- ============================================

CREATE OR REPLACE STREAM RAW.RAW_CLIENT_SUPPORT_ORDERS_STREAM
  ON TABLE RAW.RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE
  SHOW_INITIAL_ROWS = TRUE
  APPEND_ONLY = FALSE;

CREATE OR REPLACE STREAM RAW.RAW_CARBON_EMISSIONS_STREAM
  ON TABLE RAW.RAW_CARBON_EMISSIONS_PY_SNOWPIPE
  SHOW_INITIAL_ROWS = TRUE
  APPEND_ONLY = FALSE;

CREATE OR REPLACE STREAM SILVER.SILVER_ORDERS_STREAM
  ON TABLE SILVER.CLIENT_SUPPORT_ORDERS_CLEAN
  SHOW_INITIAL_ROWS = TRUE;

CREATE OR REPLACE STREAM SILVER.SILVER_EMISSIONS_STREAM
  ON TABLE SILVER.CARBON_EMISSIONS_CLEAN
  SHOW_INITIAL_ROWS = TRUE;

CREATE OR REPLACE STREAM GOLD.GOLD_METRICS_STREAM
  ON TABLE GOLD.WAREHOUSE_SUSTAINABILITY_METRICS
  SHOW_INITIAL_ROWS = TRUE;


-- ============================================
-- J. TASKS
-- ============================================

USE WAREHOUSE PIPELINE_WH;
USE ROLE INGEST;
USE DATABASE ECO_COFFEE_DWH;
USE SCHEMA SILVER;

-- 1) Merge orders -> RAW to SILVER
CREATE OR REPLACE TASK task_clean_orders
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON 0 * * * * UTC'  -- hourly
  COMMENT = 'Merge new raw orders into silver.orders_clean'
AS
-- note: cannot use schema prefix (RAW.) inside task body
MERGE INTO CLIENT_SUPPORT_ORDERS_CLEAN AS tgt
USING ECO_COFFEE_DWH.RAW_CLIENT_SUPPORT_ORDERS_STREAM AS src
ON tgt.TXID = src.TXID
WHEN MATCHED THEN
  UPDATE SET
    RFID = src.RFID,
    CUSTOMER_ID = src.CUSTOMER_ID,
    PRODUCT_ID = src.PRODUCT_ID,
    ITEM = INITCAP(src.ITEM),
    BAG_SIZE = UPPER(src.BAG_SIZE),
    UNIT_PRICE = src.UNIT_PRICE,
    QUANTITY = src.QUANTITY,
    TOTAL_PRICE = src.TOTAL_PRICE,
    ORIGIN_COUNTRY = COALESCE(src.ORIGIN_COUNTRY, 'UNKNOWN'),
    FAIR_TRADE_CERTIFIED = src.FAIR_TRADE_CERTIFIED,
    ORGANIC_CERTIFIED = src.ORGANIC_CERTIFIED,
    PURCHASE_TIME = src.PURCHASE_TIME,
    SHIPPED_DATE = src.SHIPPED_DATE,
    DELIVERED_DATE = src.DELIVERED_DATE,
    REGION = src.REGION,
    NAME = INITCAP(src.NAME),
    STREET_ADDRESS = src.STREET_ADDRESS,
    CITY = src.CITY,
    COUNTRY = src.COUNTRY,
    POSTALCODE = src.POSTALCODE,
    PHONE = src.PHONE,
    EMAIL = src.EMAIL,
    WAREHOUSE = src.WAREHOUSE,
    SHIPPING_METHOD = src.SHIPPING_METHOD,
    DELIVERY_STATUS = src.DELIVERY_STATUS,
    PAYMENT_METHOD = src.PAYMENT_METHOD,
    PAYMENT_STATUS = src.PAYMENT_STATUS,
    DELIVERY_DELAY_DAYS = src.DELIVERY_DELAY_DAYS,
    CARBON_SCORE = src.CARBON_SCORE
WHEN NOT MATCHED THEN
  INSERT (
    TXID, RFID, CUSTOMER_ID, PRODUCT_ID, ITEM, BAG_SIZE,
    UNIT_PRICE, QUANTITY, TOTAL_PRICE, ORIGIN_COUNTRY,
    FAIR_TRADE_CERTIFIED, ORGANIC_CERTIFIED, PURCHASE_TIME,
    SHIPPED_DATE, DELIVERED_DATE, REGION, NAME, STREET_ADDRESS,
    CITY, COUNTRY, POSTALCODE, PHONE, EMAIL, WAREHOUSE,
    SHIPPING_METHOD, DELIVERY_STATUS, PAYMENT_METHOD, PAYMENT_STATUS,
    DELIVERY_DELAY_DAYS, CARBON_SCORE
  )
  VALUES (
    src.TXID, src.RFID, src.CUSTOMER_ID, src.PRODUCT_ID,
    INITCAP(src.ITEM), UPPER(src.BAG_SIZE),
    src.UNIT_PRICE, src.QUANTITY, src.TOTAL_PRICE,
    COALESCE(src.ORIGIN_COUNTRY, 'UNKNOWN'),
    src.FAIR_TRADE_CERTIFIED, src.ORGANIC_CERTIFIED, src.PURCHASE_TIME,
    src.SHIPPED_DATE, src.DELIVERED_DATE, src.REGION, INITCAP(src.NAME),
    src.STREET_ADDRESS, src.CITY, src.COUNTRY, src.POSTALCODE,
    src.PHONE, src.EMAIL, src.WAREHOUSE, src.SHIPPING_METHOD,
    src.DELIVERY_STATUS, src.PAYMENT_METHOD, src.PAYMENT_STATUS,
    src.DELIVERY_DELAY_DAYS, src.CARBON_SCORE
  );


-- 2) Merge emissions -> RAW to SILVER
CREATE OR REPLACE TASK task_clean_emissions
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON 15 * * * * UTC'  -- runs hourly at minute 15
  COMMENT = 'Merge new emissions data into silver layer'
AS
MERGE INTO CARBON_EMISSIONS_CLEAN AS tgt
USING RAW_CARBON_EMISSIONS_STREAM AS src  -- ✅ removed "RAW."
ON tgt.RECORD_ID = src.RECORD_ID
WHEN MATCHED THEN
  UPDATE SET
    ORDER_ID = src.ORDER_ID,
    WAREHOUSE = src.WAREHOUSE,
    SHIPPING_METHOD = src.SHIPPING_METHOD,
    DISTANCE_KM = src.DISTANCE_KM,
    MODE = src.MODE,
    WEIGHT_KG = src.WEIGHT_KG,
    CO2_KG = src.CO2_KG,
    EMISSION_FACTOR = src.EMISSION_FACTOR,
    UPDATED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
  INSERT (
    RECORD_ID, ORDER_ID, WAREHOUSE, SHIPPING_METHOD, DISTANCE_KM,
    MODE, WEIGHT_KG, CO2_KG, EMISSION_FACTOR, UPDATED_AT
  )
  VALUES (
    src.RECORD_ID, src.ORDER_ID, src.WAREHOUSE, src.SHIPPING_METHOD,
    src.DISTANCE_KM, src.MODE, src.WEIGHT_KG, src.CO2_KG,
    src.EMISSION_FACTOR, CURRENT_TIMESTAMP()
  );

  
-- CLEANING
-- =======================================
-- 3) CLEAN WH_A Orders in SILVER
USE WAREHOUSE PIPELINE_WH;
CREATE OR REPLACE TASK task_clean_orders_wh_a
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON 5 * * * * UTC'
COMMENT = 'Merge and clean orders for WH_A'
AS
MERGE INTO SILVER.CLIENT_SUPPORT_ORDERS_WH_A AS tgt
USING (
    SELECT *
    FROM RAW.RAW_CLIENT_SUPPORT_ORDERS_STREAM
    WHERE WAREHOUSE = 'WH_A'
      AND TXID IS NOT NULL
QUALIFY ROW_NUMBER() OVER (PARTITION BY TXID ORDER BY PURCHASE_TIME DESC) = 1
) AS src
ON tgt.TXID = src.TXID
WHEN MATCHED THEN UPDATE SET
    tgt.CUSTOMER_ID = src.CUSTOMER_ID,
    tgt.PRODUCT_ID = src.PRODUCT_ID,
    tgt.ITEM = src.ITEM,
    tgt.UNIT_PRICE = src.UNIT_PRICE,
    tgt.QUANTITY = src.QUANTITY,
    tgt.TOTAL_PRICE = src.TOTAL_PRICE,
    tgt.PURCHASE_TIME = src.PURCHASE_TIME,
    tgt.SHIPPED_DATE = src.SHIPPED_DATE,
    tgt.DELIVERED_DATE = src.DELIVERED_DATE,
    tgt.REGION = src.REGION,
    tgt.DELIVERY_STATUS = src.DELIVERY_STATUS,
    tgt.CARBON_SCORE = src.CARBON_SCORE
WHEN NOT MATCHED THEN INSERT (
    TXID, CUSTOMER_ID, PRODUCT_ID, ITEM, UNIT_PRICE, QUANTITY, TOTAL_PRICE,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, DELIVERY_STATUS, CARBON_SCORE
) VALUES (
    TXID, CUSTOMER_ID, PRODUCT_ID, ITEM, UNIT_PRICE, QUANTITY, TOTAL_PRICE,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, DELIVERY_STATUS, CARBON_SCORE
);

-- 4) CLEAN WH_B Orders in SILVER
CREATE OR REPLACE TASK task_clean_orders_wh_b
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON 10 * * * * UTC'
COMMENT = 'Merge and clean orders for WH_B'
AS
MERGE INTO SILVER.CLIENT_SUPPORT_ORDERS_WH_B AS tgt
USING (
    SELECT *
    FROM RAW.RAW_CLIENT_SUPPORT_ORDERS_STREAM
    WHERE WAREHOUSE = 'WH_B'
      AND TXID IS NOT NULL
QUALIFY ROW_NUMBER() OVER (PARTITION BY TXID ORDER BY PURCHASE_TIME DESC) = 1
) AS src
ON tgt.TXID = src.TXID
WHEN MATCHED THEN UPDATE SET
    tgt.CUSTOMER_ID = src.CUSTOMER_ID,
    tgt.PRODUCT_ID = src.PRODUCT_ID,
    tgt.ITEM = src.ITEM,
    tgt.UNIT_PRICE = src.UNIT_PRICE,
    tgt.QUANTITY = src.QUANTITY,
    tgt.TOTAL_PRICE = src.TOTAL_PRICE,
    tgt.PURCHASE_TIME = src.PURCHASE_TIME,
    tgt.SHIPPED_DATE = src.SHIPPED_DATE,
    tgt.DELIVERED_DATE = src.DELIVERED_DATE,
    tgt.REGION = src.REGION,
    tgt.DELIVERY_STATUS = src.DELIVERY_STATUS,
    tgt.CARBON_SCORE = src.CARBON_SCORE
WHEN NOT MATCHED THEN INSERT (
    TXID, CUSTOMER_ID, PRODUCT_ID, ITEM, UNIT_PRICE, QUANTITY, TOTAL_PRICE,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, DELIVERY_STATUS, CARBON_SCORE
) VALUES (
    TXID, CUSTOMER_ID, PRODUCT_ID, ITEM, UNIT_PRICE, QUANTITY, TOTAL_PRICE,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, DELIVERY_STATUS, CARBON_SCORE
);

-- 5) CLEAN WH_C Orders in SILVER
CREATE OR REPLACE TASK task_clean_orders_wh_c
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON 15 * * * * UTC'
COMMENT = 'Merge and clean orders for WH_C'
AS
MERGE INTO SILVER.CLIENT_SUPPORT_ORDERS_WH_C AS tgt
USING (
    SELECT *
    FROM RAW.RAW_CLIENT_SUPPORT_ORDERS_STREAM
    WHERE WAREHOUSE = 'WH_C'
      AND TXID IS NOT NULL
QUALIFY ROW_NUMBER() OVER (PARTITION BY TXID ORDER BY PURCHASE_TIME DESC) = 1
) AS src
ON tgt.TXID = src.TXID
WHEN MATCHED THEN UPDATE SET
    tgt.CUSTOMER_ID = src.CUSTOMER_ID,
    tgt.PRODUCT_ID = src.PRODUCT_ID,
    tgt.ITEM = src.ITEM,
    tgt.UNIT_PRICE = src.UNIT_PRICE,
    tgt.QUANTITY = src.QUANTITY,
    tgt.TOTAL_PRICE = src.TOTAL_PRICE,
    tgt.PURCHASE_TIME = src.PURCHASE_TIME,
    tgt.SHIPPED_DATE = src.SHIPPED_DATE,
    tgt.DELIVERED_DATE = src.DELIVERED_DATE,
    tgt.REGION = src.REGION,
    tgt.DELIVERY_STATUS = src.DELIVERY_STATUS,
    tgt.CARBON_SCORE = src.CARBON_SCORE
WHEN NOT MATCHED THEN INSERT (
    TXID, CUSTOMER_ID, PRODUCT_ID, ITEM, UNIT_PRICE, QUANTITY, TOTAL_PRICE,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, DELIVERY_STATUS, CARBON_SCORE
) VALUES (
    TXID, CUSTOMER_ID, PRODUCT_ID, ITEM, UNIT_PRICE, QUANTITY, TOTAL_PRICE,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, DELIVERY_STATUS, CARBON_SCORE
);

-- GOLD LAYER
-- ======================================

-- 6) Merge Cleaned Silver data to Gold Layer
USE WAREHOUSE ANALYTICS_WH;
USE DATABASE STREAMLIT_APPS;
USE SCHEMA GOLD_COPY;
USE ROLE INGEST;

CREATE TABLE IF NOT EXISTS WAREHOUSE_SUSTAINABILITY_METRICS
LIKE ECO_COFFEE_DWH.GOLD.WAREHOUSE_SUSTAINABILITY_METRICS;

USE ROLE ACCOUNTADMIN;
USE DATABASE ECO_COFFEE_DWH;
USE SCHEMA GOLD;

CREATE OR REPLACE TASK task_gold_warehouse_metrics
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON 30 * * * * UTC'
  COMMENT = 'Aggregate silver data into gold warehouse sustainability metrics'
AS
INSERT INTO ECO_COFFEE_DWH.GOLD.WAREHOUSE_SUSTAINABILITY_METRICS
SELECT
    s.WAREHOUSE,
    s.WAREHOUSE_COUNTRY,
    DATE_TRUNC('month', s.ORDER_DATE) AS REPORTING_MONTH,
    COUNT(DISTINCT s.ORDER_ID) AS TOTAL_ORDERS,
    SUM(s.REVENUE) AS TOTAL_REVENUE,
    AVG(e.CARBON_SCORE) AS AVG_CARBON_SCORE,
    SUM(e.ESTIMATED_EMISSIONS_KGCO2E) AS TOTAL_EMISSIONS_KGCO2E,
    CURRENT_TIMESTAMP() AS UPDATED_AT
FROM ECO_COFFEE_DWH.SILVER.CLIENT_SUPPORT_ORDERS_CLEAN s
JOIN ECO_COFFEE_DWH.SILVER.CARBON_EMISSIONS_CLEAN e
  ON s.ORDER_ID = e.ORDER_ID
GROUP BY 1,2,3;


-- 4) Copy GOLD layer → STREAMLIT APPs
USE ROLE ACCOUNTADMIN;
USE DATABASE STREAMLIT_APPS;
USE SCHEMA GOLD_COPY;

CREATE OR REPLACE TASK STREAMLIT_APPS.GOLD_COPY.TASK_COPY_GOLD_TO_STREAMLIT
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON 0 */6 * * * UTC'  -- every 6 hours
  COMMENT = 'Copy gold metrics from ECO_COFFEE_DWH.GOLD to STREAMLIT_APPS.GOLD_COPY'
AS
MERGE INTO STREAMLIT_APPS.GOLD_COPY.WAREHOUSE_SUSTAINABILITY_METRICS AS tgt
USING ECO_COFFEE_DWH.GOLD.WAREHOUSE_SUSTAINABILITY_METRICS AS src
ON tgt.WAREHOUSE = src.WAREHOUSE
   AND tgt.WAREHOUSE_COUNTRY = src.WAREHOUSE_COUNTRY
   AND tgt.REPORTING_MONTH = src.REPORTING_MONTH
WHEN MATCHED THEN UPDATE SET
    tgt.TOTAL_ORDERS = src.TOTAL_ORDERS,
    tgt.TOTAL_REVENUE = src.TOTAL_REVENUE,
    tgt.AVG_CARBON_SCORE = src.AVG_CARBON_SCORE,
    tgt.TOTAL_EMISSIONS_KGCO2E = src.TOTAL_EMISSIONS_KGCO2E,
    tgt.UPDATED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN INSERT (
    WAREHOUSE,
    WAREHOUSE_COUNTRY,
    REPORTING_MONTH,
    TOTAL_ORDERS,
    TOTAL_REVENUE,
    AVG_CARBON_SCORE,
    TOTAL_EMISSIONS_KGCO2E,
    UPDATED_AT
) VALUES (
    src.WAREHOUSE,
    src.WAREHOUSE_COUNTRY,
    src.REPORTING_MONTH,
    src.TOTAL_ORDERS,
    src.TOTAL_REVENUE,
    src.AVG_CARBON_SCORE,
    src.TOTAL_EMISSIONS_KGCO2E,
    CURRENT_TIMESTAMP()
);


-- ============================================
-- K. ENABLE TASKS
-- ============================================

GRANT OPERATE ON TASK ECO_COFFEE_DWH.SILVER.task_clean_orders TO ROLE INGEST;
GRANT OPERATE ON TASK ECO_COFFEE_DWH.SILVER.task_clean_emissions TO ROLE INGEST;
GRANT OPERATE ON TASK ECO_COFFEE_DWH.GOLD.task_gold_warehouse_metrics TO ROLE INGEST;
GRANT OPERATE ON TASK STREAMLIT_APPS.GOLD_COPY.task_copy_gold_to_streamlit TO ROLE INGEST;

ALTER TASK IF EXISTS task_clean_orders RESUME;
ALTER TASK IF EXISTS task_clean_emissions RESUME;
ALTER TASK IF EXISTS task_gold_warehouse_metrics RESUME;
ALTER TASK IF EXISTS task_copy_gold_to_streamlit RESUME;

