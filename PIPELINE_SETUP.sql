-- ============================================
-- A. ROLE & WAREHOUSE SETUP 
-- ============================================

USE ROLE SECURITYADMIN;

CREATE ROLE IF NOT EXISTS INGEST;
CREATE ROLE IF NOT EXISTS DATA_VIZ;
CREATE ROLE IF NOT EXISTS ETL_ADMIN;

USE ROLE SYSADMIN;

CREATE WAREHOUSE IF NOT EXISTS PIPELINE_WH
  WAREHOUSE_SIZE = 'SMALL'
  AUTO_SUSPEND = 60
  AUTO_RESUME = TRUE
  INITIALLY_SUSPENDED = TRUE;

CREATE WAREHOUSE IF NOT EXISTS ANALYTICS_WH
  WAREHOUSE_SIZE = 'XSMALL'
  AUTO_SUSPEND = 300
  AUTO_RESUME = TRUE
  INITIALLY_SUSPENDED = TRUE;

-- ============================================
-- B. DATABASE / SCHEMA CREATION
-- ============================================

USE ROLE ACCOUNTADMIN;

CREATE DATABASE IF NOT EXISTS ECO_COFFEE_DWH;
GRANT OWNERSHIP ON DATABASE ECO_COFFEE_DWH TO ROLE ACCOUNTADMIN REVOKE CURRENT GRANTS;
USE DATABASE ECO_COFFEE_DWH;

CREATE SCHEMA IF NOT EXISTS RAW;
CREATE SCHEMA IF NOT EXISTS SILVER;
CREATE SCHEMA IF NOT EXISTS GOLD;

CREATE DATABASE IF NOT EXISTS STREAMLIT_APPS;
GRANT OWNERSHIP ON DATABASE STREAMLIT_APPS TO ROLE ACCOUNTADMIN REVOKE CURRENT GRANTS;
USE DATABASE STREAMLIT_APPS;
CREATE SCHEMA IF NOT EXISTS GOLD_COPY;

-- ============================================
-- C. GRANTS 
-- ============================================

GRANT USAGE ON WAREHOUSE PIPELINE_WH TO ROLE INGEST;
GRANT USAGE ON WAREHOUSE ANALYTICS_WH TO ROLE INGEST;

GRANT USAGE ON DATABASE ECO_COFFEE_DWH TO ROLE INGEST;
GRANT USAGE ON ALL SCHEMAS IN DATABASE ECO_COFFEE_DWH TO ROLE INGEST;
GRANT CREATE TABLE, CREATE STAGE, CREATE STREAM, CREATE PIPE, CREATE TASK, CREATE FILE FORMAT
  ON SCHEMA ECO_COFFEE_DWH.RAW TO ROLE INGEST;
GRANT CREATE TABLE, CREATE STAGE, CREATE STREAM, CREATE PIPE, CREATE TASK, CREATE FILE FORMAT
  ON SCHEMA ECO_COFFEE_DWH.SILVER TO ROLE INGEST;
GRANT CREATE TABLE, CREATE STAGE, CREATE STREAM, CREATE PIPE, CREATE TASK, CREATE FILE FORMAT
  ON SCHEMA ECO_COFFEE_DWH.GOLD TO ROLE INGEST;

GRANT SELECT ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.RAW TO ROLE INGEST;
GRANT SELECT ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.SILVER TO ROLE INGEST;
GRANT SELECT ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.GOLD TO ROLE INGEST;

GRANT USAGE ON DATABASE STREAMLIT_APPS TO ROLE INGEST;
GRANT USAGE ON ALL SCHEMAS IN DATABASE STREAMLIT_APPS TO ROLE INGEST;
GRANT CREATE STREAM, CREATE TASK, CREATE TABLE ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE INGEST;
GRANT INSERT, UPDATE, DELETE, SELECT ON ALL TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE INGEST;
GRANT INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE INGEST;
GRANT CREATE FILE FORMAT ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE INGEST;

GRANT USAGE ON DATABASE STREAMLIT_APPS TO ROLE DATA_VIZ;
GRANT USAGE ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT SELECT ON ALL TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT SELECT ON FUTURE TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT CREATE STAGE ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT USAGE ON ALL SCHEMAS IN DATABASE STREAMLIT_APPS TO ROLE DATA_VIZ;
GRANT CREATE STREAM, CREATE TASK, CREATE TABLE ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT INSERT, UPDATE, DELETE, SELECT ON ALL TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;
GRANT CREATE FILE FORMAT ON SCHEMA STREAMLIT_APPS.GOLD_COPY TO ROLE DATA_VIZ;


-- ============================================
-- D. INGEST USER
-- ============================================
USE ROLE SECURITYADMIN;

CREATE OR REPLACE USER INGEST PASSWORD='ETLWAREHOUSING1a' LOGIN_NAME='INGEST' 
    MUST_CHANGE_PASSWORD=FALSE, DISABLED=FALSE, 
    DEFAULT_WAREHOUSE='PIPELINE_WH', DEFAULT_NAMESPACE='PIPELINE_WH.INGEST', 
    DEFAULT_ROLE='INGEST';

ALTER USER INGEST SET RSA_PUBLIC_KEY='-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvfF+AfrNfIyMvdKt/qoZ
E9JTbNRwVKTtpONsNXI/9fGZMLieob2A4r1MdbbesfH0/SxvjgyN+VphgrOK5AB8
yx+7z1smn7amu6i48HWUcbNmvMSaHHR7JmGZEC8hwwOPNZ3Me6R4eL3WBDIvVTTA
CuA5eWs+9nJ1l26WdbRdaMyZBPe2eQn7aeTENVouRu1lt+GG0ewjrnfaS3RZfCd0
l5fEOo0AoL5u+zLMPNKF17Wi1Lp/gGwfgbbhl93+DpjTIN5trmZhy4TF/8/uxN7E
iR+eSWb2f6T2xdKiJwSDNuo10tdhggRgHemeYqpn3aku48DqE7yRDInqsGaLPn2c
RL9ReKLq/xRitlxP4v2F4nPnGd91vXGnvedXENxIoofrKPm5QblT0ZBwJEZdnDrE
KTBJ34BI6p6JUU8pu7/kEXJZ5y9wqOJAGU9JPX4hmHWF0U8mCT9dLf4B6kNbjA+y
mLM2pxDnP0gz4x3phBQqFgZIXn+5VQxaTGi+2Req4KtILEwaEQY1E0cfO36RGYJ8
BNuyRa1t0YiYKM3YXfP51+OiJ75UGw5TUOnN68ue+G68+55QdGbJiakguFsW5wTQ
iieqBW7g+3ycxp+SQKtXOvqCpNT7rUE6zM0TWOiNksWAxCKU63Lpf3kdnlaSBBPI
fvVDBND+3Y42JcaKwuc/L5MCAwEAAQ==
-----END PUBLIC KEY-----';

SET USERNAME=CURRENT_USER();
GRANT ROLE INGEST TO USER IDENTIFIER($USERNAME);

GRANT ROLE INGEST TO USER INGEST;

-- ============================================
-- E. RAW TABLES
-- ============================================

USE ROLE INGEST;
USE DATABASE ECO_COFFEE_DWH;
USE SCHEMA RAW;

CREATE OR REPLACE TABLE RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE (
    TXID STRING NOT NULL,
    RFID STRING,
    CUSTOMER_ID STRING,
    PRODUCT_ID STRING,
    ITEM STRING,
    BAG_SIZE STRING,
    UNIT_PRICE NUMBER(10,2),
    QUANTITY NUMBER(10,0),
    TOTAL_PRICE NUMBER(12,2),
    ORIGIN_COUNTRY STRING,
    FAIR_TRADE_CERTIFIED BOOLEAN,
    ORGANIC_CERTIFIED BOOLEAN,
    PURCHASE_TIME date NOT NULL,
    SHIPPED_DATE date,
    DELIVERED_DATE date,
    REGION STRING,
    NAME STRING,
    STREET_ADDRESS STRING,
    CITY STRING,
    COUNTRY STRING,
    POSTALCODE STRING,
    PHONE STRING,
    EMAIL STRING,
    WAREHOUSE STRING,
    SHIPPING_METHOD STRING,
    DELIVERY_STATUS STRING,
    PAYMENT_METHOD STRING,
    PAYMENT_STATUS STRING,
    DELIVERY_DELAY_DAYS NUMBER(10,0),
    CARBON_SCORE NUMBER(10,2),
    METADATA VARIANT,
    PRIMARY KEY (TXID)
);

CREATE OR REPLACE TABLE RAW_CARBON_EMISSIONS_PY_SNOWPIPE (
    RECORD_ID STRING NOT NULL,
    ORDER_ID STRING,
    WAREHOUSE_ID STRING,
    WAREHOUSE_NAME STRING,
    WAREHOUSE_COUNTRY STRING,
    ORIGIN_COUNTRY STRING,
    DISTANCE_CLASS STRING,
    SHIPPING_METHOD STRING,
    SHIPMENTS_COUNT NUMBER(10,0),
    AVG_BATCH_SIZE_KG NUMBER(10,2),
    ESTIMATED_EMISSIONS_KGCO2E NUMBER(12,2),
    RAW_PAYLOAD VARIANT,
    METADATA VARIANT,
    PRIMARY KEY (RECORD_ID)
);

-- ============================================
-- F. PIPES
-- ============================================

CREATE OR REPLACE PIPE CLIENT_SUPPORT_ORDERS_PIPE AS 
COPY INTO RAW.RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE 
FROM @RAW.%RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE 
FILE_FORMAT = (TYPE='PARQUET') 
MATCH_BY_COLUMN_NAME = CASE_SENSITIVE 
ON_ERROR = 'CONTINUE';

CREATE OR REPLACE PIPE CARBON_EMISSIONS_PIPE AS
COPY INTO RAW.RAW_CARBON_EMISSIONS_PY_SNOWPIPE
FROM @RAW.%RAW_CARBON_EMISSIONS_PY_SNOWPIPE
FILE_FORMAT = (TYPE='PARQUET')
MATCH_BY_COLUMN_NAME = CASE_SENSITIVE
ON_ERROR = 'CONTINUE';

-- ============================================
-- 0. SETUP: ACCOUNTADMIN ROLE AND PRIVILEGES
-- ============================================

USE ROLE ACCOUNTADMIN;

-- Database and schema privileges
GRANT USAGE ON DATABASE ECO_COFFEE_DWH TO ROLE ACCOUNTADMIN;
GRANT USAGE ON SCHEMA ECO_COFFEE_DWH.RAW TO ROLE ACCOUNTADMIN;
GRANT USAGE ON SCHEMA ECO_COFFEE_DWH.SILVER TO ROLE ACCOUNTADMIN;
GRANT USAGE ON SCHEMA ECO_COFFEE_DWH.GOLD TO ROLE ACCOUNTADMIN;

GRANT SELECT ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.RAW TO ROLE ACCOUNTADMIN;
GRANT SELECT ON ALL STREAMS IN SCHEMA ECO_COFFEE_DWH.RAW TO ROLE ACCOUNTADMIN;

GRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.SILVER TO ROLE ACCOUNTADMIN;
GRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA ECO_COFFEE_DWH.GOLD TO ROLE ACCOUNTADMIN;


-- ============================================
-- 1. RAW â†’ SILVER LAYER
-- ============================================

USE DATABASE ECO_COFFEE_DWH;
USE SCHEMA SILVER;

-- Silver tables
CREATE OR REPLACE TABLE CLIENT_SUPPORT_ORDERS_CLEAN LIKE ECO_COFFEE_DWH.RAW.RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE;
CREATE OR REPLACE TABLE CARBON_EMISSIONS_CLEAN LIKE ECO_COFFEE_DWH.RAW.RAW_CARBON_EMISSIONS_PY_SNOWPIPE;

-- Streams
CREATE OR REPLACE STREAM ECO_COFFEE_DWH.RAW.RAW_CLIENT_SUPPORT_ORDERS_STREAM
    ON TABLE ECO_COFFEE_DWH.RAW.RAW_CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE
    SHOW_INITIAL_ROWS = TRUE
    APPEND_ONLY = FALSE;

CREATE OR REPLACE STREAM ECO_COFFEE_DWH.RAW.RAW_CARBON_EMISSIONS_STREAM
    ON TABLE ECO_COFFEE_DWH.RAW.RAW_CARBON_EMISSIONS_PY_SNOWPIPE
    SHOW_INITIAL_ROWS = TRUE
    APPEND_ONLY = FALSE;


-- ============================================
-- 2. SILVER CLEANING TASKS
-- ============================================

USE WAREHOUSE PIPELINE_WH;

-- Orders cleaning task
CREATE OR REPLACE TASK ECO_COFFEE_DWH.SILVER.task_clean_orders
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON * * * * * UTC'
AS
MERGE INTO ECO_COFFEE_DWH.SILVER.CLIENT_SUPPORT_ORDERS_CLEAN AS tgt
USING (
    SELECT *
    FROM ECO_COFFEE_DWH.RAW.RAW_CLIENT_SUPPORT_ORDERS_STREAM
    WHERE TXID IS NOT NULL
    QUALIFY ROW_NUMBER() OVER (PARTITION BY TXID ORDER BY METADATA$ROW_ID DESC) = 1
) AS src
ON tgt.TXID = src.TXID
WHEN MATCHED THEN UPDATE SET
    ITEM = INITCAP(src.ITEM),
    BAG_SIZE = UPPER(src.BAG_SIZE),
    PURCHASE_TIME = CASE WHEN src.PURCHASE_TIME <= CURRENT_TIMESTAMP() THEN src.PURCHASE_TIME ELSE NULL END,
    SHIPPED_DATE = CASE WHEN src.SHIPPED_DATE <= CURRENT_TIMESTAMP() THEN src.SHIPPED_DATE ELSE NULL END,
    DELIVERED_DATE = CASE WHEN src.DELIVERED_DATE <= CURRENT_TIMESTAMP() THEN src.DELIVERED_DATE ELSE NULL END,
    CARBON_SCORE = src.CARBON_SCORE
WHEN NOT MATCHED THEN INSERT (
    TXID, RFID, CUSTOMER_ID, PRODUCT_ID, ITEM, BAG_SIZE, UNIT_PRICE, QUANTITY,
    TOTAL_PRICE, ORIGIN_COUNTRY, FAIR_TRADE_CERTIFIED, ORGANIC_CERTIFIED,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, NAME, STREET_ADDRESS,
    CITY, COUNTRY, POSTALCODE, PHONE, EMAIL, WAREHOUSE, SHIPPING_METHOD,
    DELIVERY_STATUS, PAYMENT_METHOD, PAYMENT_STATUS, DELIVERY_DELAY_DAYS, CARBON_SCORE, METADATA
)
VALUES (
    src.TXID, src.RFID, src.CUSTOMER_ID, src.PRODUCT_ID, INITCAP(src.ITEM), UPPER(src.BAG_SIZE), src.UNIT_PRICE, src.QUANTITY,
    src.TOTAL_PRICE, src.ORIGIN_COUNTRY, src.FAIR_TRADE_CERTIFIED, src.ORGANIC_CERTIFIED,
    CASE WHEN src.PURCHASE_TIME <= CURRENT_TIMESTAMP() THEN src.PURCHASE_TIME ELSE NULL END,
    CASE WHEN src.SHIPPED_DATE <= CURRENT_TIMESTAMP() THEN src.SHIPPED_DATE ELSE NULL END,
    CASE WHEN src.DELIVERED_DATE <= CURRENT_TIMESTAMP() THEN src.DELIVERED_DATE ELSE NULL END,
    src.REGION, src.NAME, src.STREET_ADDRESS,
    src.CITY, src.COUNTRY, src.POSTALCODE, src.PHONE, src.EMAIL, src.WAREHOUSE, src.SHIPPING_METHOD,
    src.DELIVERY_STATUS, src.PAYMENT_METHOD, src.PAYMENT_STATUS, src.DELIVERY_DELAY_DAYS, src.CARBON_SCORE, src.METADATA
);

-- Emissions cleaning task
CREATE OR REPLACE TASK ECO_COFFEE_DWH.SILVER.task_clean_emissions
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON * * * * * UTC'
AS
MERGE INTO ECO_COFFEE_DWH.SILVER.CARBON_EMISSIONS_CLEAN AS tgt
USING (
    SELECT *
         ,CASE 
             WHEN ESTIMATED_EMISSIONS_KGCO2E < 0 THEN NULL 
             ELSE ESTIMATED_EMISSIONS_KGCO2E 
          END AS ESTIMATED_EMISSIONS_CLEAN
         ,ROW_NUMBER() OVER (
              PARTITION BY RECORD_ID 
              ORDER BY METADATA$ROW_ID DESC
          ) AS rn  -- latest row per RECORD_ID
    FROM ECO_COFFEE_DWH.RAW.RAW_CARBON_EMISSIONS_STREAM
) AS src
ON tgt.RECORD_ID = src.RECORD_ID
WHEN MATCHED AND src.rn = 1 THEN UPDATE SET
    ESTIMATED_EMISSIONS_KGCO2E = src.ESTIMATED_EMISSIONS_CLEAN,
    WAREHOUSE_ID = src.WAREHOUSE_ID,
    WAREHOUSE_NAME = src.WAREHOUSE_NAME,
    WAREHOUSE_COUNTRY = src.WAREHOUSE_COUNTRY,
    ORIGIN_COUNTRY = src.ORIGIN_COUNTRY,
    DISTANCE_CLASS = src.DISTANCE_CLASS,
    SHIPPING_METHOD = src.SHIPPING_METHOD,
    SHIPMENTS_COUNT = src.SHIPMENTS_COUNT,
    AVG_BATCH_SIZE_KG = src.AVG_BATCH_SIZE_KG,
    RAW_PAYLOAD = src.RAW_PAYLOAD
WHEN NOT MATCHED AND src.rn = 1 THEN INSERT (
    RECORD_ID, ORDER_ID, WAREHOUSE_ID, WAREHOUSE_NAME, WAREHOUSE_COUNTRY,
    ORIGIN_COUNTRY, DISTANCE_CLASS, SHIPPING_METHOD, SHIPMENTS_COUNT,
    AVG_BATCH_SIZE_KG, ESTIMATED_EMISSIONS_KGCO2E, RAW_PAYLOAD
)
VALUES (
    src.RECORD_ID, src.ORDER_ID, src.WAREHOUSE_ID, src.WAREHOUSE_NAME, src.WAREHOUSE_COUNTRY,
    src.ORIGIN_COUNTRY, src.DISTANCE_CLASS, src.SHIPPING_METHOD, src.SHIPMENTS_COUNT,
    src.AVG_BATCH_SIZE_KG, src.ESTIMATED_EMISSIONS_CLEAN, src.RAW_PAYLOAD
);



-- ============================================
-- 3. SILVER â†’ GOLD LAYER
-- ============================================

USE SCHEMA GOLD;

CREATE OR REPLACE TABLE GOLD_CLIENT_SUPPORT_ORDERS LIKE ECO_COFFEE_DWH.SILVER.CLIENT_SUPPORT_ORDERS_CLEAN;
CREATE OR REPLACE TABLE GOLD_CARBON_EMISSIONS LIKE ECO_COFFEE_DWH.SILVER.CARBON_EMISSIONS_CLEAN;

CREATE OR REPLACE STREAM ECO_COFFEE_DWH.SILVER.SILVER_ORDERS_STREAM
  ON TABLE ECO_COFFEE_DWH.SILVER.CLIENT_SUPPORT_ORDERS_CLEAN
  SHOW_INITIAL_ROWS = TRUE;

CREATE OR REPLACE STREAM ECO_COFFEE_DWH.SILVER.SILVER_EMISSIONS_STREAM
  ON TABLE ECO_COFFEE_DWH.SILVER.CARBON_EMISSIONS_CLEAN
  SHOW_INITIAL_ROWS = TRUE;

-- Gold Orders task
CREATE OR REPLACE TASK ECO_COFFEE_DWH.GOLD.task_gold_orders
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON * * * * * UTC'
AS
MERGE INTO GOLD_CLIENT_SUPPORT_ORDERS AS tgt
USING ECO_COFFEE_DWH.SILVER.SILVER_ORDERS_STREAM AS src
ON tgt.TXID = src.TXID
WHEN MATCHED THEN UPDATE SET
    ITEM = src.ITEM,
    BAG_SIZE = src.BAG_SIZE,
    PURCHASE_TIME = src.PURCHASE_TIME,
    SHIPPED_DATE = src.SHIPPED_DATE,
    DELIVERED_DATE = src.DELIVERED_DATE,
    CARBON_SCORE = src.CARBON_SCORE
WHEN NOT MATCHED THEN INSERT (
    TXID, RFID, CUSTOMER_ID, PRODUCT_ID, ITEM, BAG_SIZE, UNIT_PRICE, QUANTITY,
    TOTAL_PRICE, ORIGIN_COUNTRY, FAIR_TRADE_CERTIFIED, ORGANIC_CERTIFIED,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, NAME, STREET_ADDRESS,
    CITY, COUNTRY, POSTALCODE, PHONE, EMAIL, WAREHOUSE, SHIPPING_METHOD,
    DELIVERY_STATUS, PAYMENT_METHOD, PAYMENT_STATUS, DELIVERY_DELAY_DAYS, CARBON_SCORE, METADATA
)
VALUES (
    src.TXID, src.RFID, src.CUSTOMER_ID, src.PRODUCT_ID, src.ITEM, src.BAG_SIZE, src.UNIT_PRICE, src.QUANTITY,
    src.TOTAL_PRICE, src.ORIGIN_COUNTRY, src.FAIR_TRADE_CERTIFIED, src.ORGANIC_CERTIFIED,
    src.PURCHASE_TIME, src.SHIPPED_DATE, src.DELIVERED_DATE, src.REGION, src.NAME, src.STREET_ADDRESS,
    src.CITY, src.COUNTRY, src.POSTALCODE, src.PHONE, src.EMAIL, src.WAREHOUSE, src.SHIPPING_METHOD,
    src.DELIVERY_STATUS, src.PAYMENT_METHOD, src.PAYMENT_STATUS, src.DELIVERY_DELAY_DAYS, src.CARBON_SCORE, src.METADATA
);

-- Gold Emissions task
CREATE OR REPLACE TASK ECO_COFFEE_DWH.GOLD.task_gold_emissions
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON * * * * * UTC'
AS
MERGE INTO GOLD_CARBON_EMISSIONS AS tgt
USING ECO_COFFEE_DWH.SILVER.SILVER_EMISSIONS_STREAM AS src
ON tgt.RECORD_ID = src.RECORD_ID
WHEN MATCHED THEN UPDATE SET
    ORDER_ID = src.ORDER_ID,
    WAREHOUSE_ID = src.WAREHOUSE_ID,
    WAREHOUSE_NAME = src.WAREHOUSE_NAME,
    WAREHOUSE_COUNTRY = src.WAREHOUSE_COUNTRY,
    ORIGIN_COUNTRY = src.ORIGIN_COUNTRY,
    DISTANCE_CLASS = src.DISTANCE_CLASS,
    SHIPPING_METHOD = src.SHIPPING_METHOD,
    SHIPMENTS_COUNT = src.SHIPMENTS_COUNT,
    AVG_BATCH_SIZE_KG = src.AVG_BATCH_SIZE_KG,
    ESTIMATED_EMISSIONS_KGCO2E = src.ESTIMATED_EMISSIONS_KGCO2E,
    RAW_PAYLOAD = src.RAW_PAYLOAD
WHEN NOT MATCHED THEN INSERT (
    RECORD_ID, ORDER_ID, WAREHOUSE_ID, WAREHOUSE_NAME, WAREHOUSE_COUNTRY,
    ORIGIN_COUNTRY, DISTANCE_CLASS, SHIPPING_METHOD, SHIPMENTS_COUNT,
    AVG_BATCH_SIZE_KG, ESTIMATED_EMISSIONS_KGCO2E, RAW_PAYLOAD
)
VALUES (
    src.RECORD_ID, src.ORDER_ID, src.WAREHOUSE_ID, src.WAREHOUSE_NAME, src.WAREHOUSE_COUNTRY,
    src.ORIGIN_COUNTRY, src.DISTANCE_CLASS, src.SHIPPING_METHOD, src.SHIPMENTS_COUNT,
    src.AVG_BATCH_SIZE_KG, src.ESTIMATED_EMISSIONS_KGCO2E, src.RAW_PAYLOAD
);


-- ============================================
-- 4. GOLD â†’ STREAMLIT_APPS COPY
-- ============================================

USE DATABASE STREAMLIT_APPS;
USE SCHEMA GOLD_COPY;

CREATE OR REPLACE TABLE CLIENT_SUPPORT_ORDERS LIKE ECO_COFFEE_DWH.GOLD.GOLD_CLIENT_SUPPORT_ORDERS;
CREATE OR REPLACE TABLE CARBON_EMISSIONS LIKE ECO_COFFEE_DWH.GOLD.GOLD_CARBON_EMISSIONS;

-- Orders copy task
CREATE OR REPLACE TASK task_copy_gold_orders_to_streamlit
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON */5 * * * * UTC'
AS
MERGE INTO CLIENT_SUPPORT_ORDERS AS tgt
USING ECO_COFFEE_DWH.GOLD.GOLD_CLIENT_SUPPORT_ORDERS AS src
ON tgt.TXID = src.TXID
WHEN MATCHED THEN UPDATE SET
    ITEM = src.ITEM,
    BAG_SIZE = src.BAG_SIZE,
    PURCHASE_TIME = src.PURCHASE_TIME,
    SHIPPED_DATE = src.SHIPPED_DATE,
    DELIVERED_DATE = src.DELIVERED_DATE,
    CARBON_SCORE = src.CARBON_SCORE
WHEN NOT MATCHED THEN INSERT (
    TXID, RFID, CUSTOMER_ID, PRODUCT_ID, ITEM, BAG_SIZE, UNIT_PRICE, QUANTITY,
    TOTAL_PRICE, ORIGIN_COUNTRY, FAIR_TRADE_CERTIFIED, ORGANIC_CERTIFIED,
    PURCHASE_TIME, SHIPPED_DATE, DELIVERED_DATE, REGION, NAME, STREET_ADDRESS,
    CITY, COUNTRY, POSTALCODE, PHONE, EMAIL, WAREHOUSE, SHIPPING_METHOD,
    DELIVERY_STATUS, PAYMENT_METHOD, PAYMENT_STATUS, DELIVERY_DELAY_DAYS, CARBON_SCORE, METADATA
)
VALUES (
    src.TXID, src.RFID, src.CUSTOMER_ID, src.PRODUCT_ID, src.ITEM, src.BAG_SIZE, src.UNIT_PRICE, src.QUANTITY,
    src.TOTAL_PRICE, src.ORIGIN_COUNTRY, src.FAIR_TRADE_CERTIFIED, src.ORGANIC_CERTIFIED,
    src.PURCHASE_TIME, src.SHIPPED_DATE, src.DELIVERED_DATE, src.REGION, src.NAME, src.STREET_ADDRESS,
    src.CITY, src.COUNTRY, src.POSTALCODE, src.PHONE, src.EMAIL, src.WAREHOUSE, src.SHIPPING_METHOD,
    src.DELIVERY_STATUS, src.PAYMENT_METHOD, src.PAYMENT_STATUS, src.DELIVERY_DELAY_DAYS, src.CARBON_SCORE, src.METADATA
);

-- Emissions copy task
CREATE OR REPLACE TASK task_copy_gold_emissions_to_streamlit
  WAREHOUSE = PIPELINE_WH
  SCHEDULE = 'USING CRON */5 * * * * UTC'
AS
MERGE INTO CARBON_EMISSIONS AS tgt
USING ECO_COFFEE_DWH.GOLD.GOLD_CARBON_EMISSIONS AS src
ON tgt.RECORD_ID = src.RECORD_ID
WHEN MATCHED THEN UPDATE SET
    ORDER_ID = src.ORDER_ID,
    WAREHOUSE_ID = src.WAREHOUSE_ID,
    WAREHOUSE_NAME = src.WAREHOUSE_NAME,
    WAREHOUSE_COUNTRY = src.WAREHOUSE_COUNTRY,
    ORIGIN_COUNTRY = src.ORIGIN_COUNTRY,
    DISTANCE_CLASS = src.DISTANCE_CLASS,
    SHIPPING_METHOD = src.SHIPPING_METHOD,
    SHIPMENTS_COUNT = src.SHIPMENTS_COUNT,
    AVG_BATCH_SIZE_KG = src.AVG_BATCH_SIZE_KG,
    ESTIMATED_EMISSIONS_KGCO2E = src.ESTIMATED_EMISSIONS_KGCO2E,
    RAW_PAYLOAD = src.RAW_PAYLOAD
WHEN NOT MATCHED THEN INSERT (
    RECORD_ID, ORDER_ID, WAREHOUSE_ID, WAREHOUSE_NAME, WAREHOUSE_COUNTRY,
    ORIGIN_COUNTRY, DISTANCE_CLASS, SHIPPING_METHOD, SHIPMENTS_COUNT,
    AVG_BATCH_SIZE_KG, ESTIMATED_EMISSIONS_KGCO2E, RAW_PAYLOAD
)
VALUES (
    src.RECORD_ID, src.ORDER_ID, src.WAREHOUSE_ID, src.WAREHOUSE_NAME, src.WAREHOUSE_COUNTRY,
    src.ORIGIN_COUNTRY, src.DISTANCE_CLASS, src.SHIPPING_METHOD, src.SHIPMENTS_COUNT,
    src.AVG_BATCH_SIZE_KG, src.ESTIMATED_EMISSIONS_KGCO2E, src.RAW_PAYLOAD
);


-- ============================================
-- 5. GRANTS & RESUME TASKS
-- ============================================

GRANT OPERATE ON TASK ECO_COFFEE_DWH.SILVER.task_clean_orders TO ROLE INGEST;
GRANT OPERATE ON TASK ECO_COFFEE_DWH.SILVER.task_clean_emissions TO ROLE INGEST;
GRANT OPERATE ON TASK ECO_COFFEE_DWH.GOLD.task_gold_orders TO ROLE INGEST;
GRANT OPERATE ON TASK ECO_COFFEE_DWH.GOLD.task_gold_emissions TO ROLE INGEST;
GRANT OPERATE ON TASK task_copy_gold_orders_to_streamlit TO ROLE INGEST;
GRANT OPERATE ON TASK task_copy_gold_emissions_to_streamlit TO ROLE INGEST;

ALTER TASK IF EXISTS ECO_COFFEE_DWH.SILVER.task_clean_orders RESUME;
ALTER TASK IF EXISTS ECO_COFFEE_DWH.SILVER.task_clean_emissions RESUME;
ALTER TASK IF EXISTS ECO_COFFEE_DWH.GOLD.task_gold_orders RESUME;
ALTER TASK IF EXISTS ECO_COFFEE_DWH.GOLD.task_gold_emissions RESUME;
ALTER TASK IF EXISTS task_copy_gold_orders_to_streamlit RESUME;
ALTER TASK IF EXISTS task_copy_gold_emissions_to_streamlit RESUME;